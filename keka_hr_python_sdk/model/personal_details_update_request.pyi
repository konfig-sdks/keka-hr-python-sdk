# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from keka_hr_python_sdk import schemas  # noqa: F401


class PersonalDetailsUpdateRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class displayName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'displayName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class firstName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firstName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class middleName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'middleName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class lastName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def gender() -> typing.Type['Gender']:
                return Gender
            
            
            class dateOfBirth(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateOfBirth':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class workPhone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'tel'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workPhone':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class homePhone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'tel'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'homePhone':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class personalEmail(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'email'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'personalEmail':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class skypeId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'skypeId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def maritalStatus() -> typing.Type['MaritalStatus']:
                return MaritalStatus
            
            
            class marriageDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'marriageDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class relations(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Relation']:
                        return Relation
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relations':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def bloodGroup() -> typing.Type['BloodGroup']:
                return BloodGroup
        
            @staticmethod
            def currentAddress() -> typing.Type['Address']:
                return Address
        
            @staticmethod
            def permanentAddress() -> typing.Type['Address']:
                return Address
            
            
            class professionalSummary(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'professionalSummary':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def customFields() -> typing.Type['PersonalDetailsUpdateRequestCustomFields']:
                return PersonalDetailsUpdateRequestCustomFields
            __annotations__ = {
                "displayName": displayName,
                "firstName": firstName,
                "middleName": middleName,
                "lastName": lastName,
                "gender": gender,
                "dateOfBirth": dateOfBirth,
                "workPhone": workPhone,
                "homePhone": homePhone,
                "personalEmail": personalEmail,
                "skypeId": skypeId,
                "maritalStatus": maritalStatus,
                "marriageDate": marriageDate,
                "relations": relations,
                "bloodGroup": bloodGroup,
                "currentAddress": currentAddress,
                "permanentAddress": permanentAddress,
                "professionalSummary": professionalSummary,
                "customFields": customFields,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> 'Gender': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhone"]) -> MetaOapg.properties.workPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhone"]) -> MetaOapg.properties.homePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personalEmail"]) -> MetaOapg.properties.personalEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skypeId"]) -> MetaOapg.properties.skypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maritalStatus"]) -> 'MaritalStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marriageDate"]) -> MetaOapg.properties.marriageDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relations"]) -> MetaOapg.properties.relations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bloodGroup"]) -> 'BloodGroup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentAddress"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permanentAddress"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["professionalSummary"]) -> MetaOapg.properties.professionalSummary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFields"]) -> 'PersonalDetailsUpdateRequestCustomFields': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["displayName", "firstName", "middleName", "lastName", "gender", "dateOfBirth", "workPhone", "homePhone", "personalEmail", "skypeId", "maritalStatus", "marriageDate", "relations", "bloodGroup", "currentAddress", "permanentAddress", "professionalSummary", "customFields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union['Gender', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBirth"]) -> typing.Union[MetaOapg.properties.dateOfBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhone"]) -> typing.Union[MetaOapg.properties.workPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhone"]) -> typing.Union[MetaOapg.properties.homePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personalEmail"]) -> typing.Union[MetaOapg.properties.personalEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skypeId"]) -> typing.Union[MetaOapg.properties.skypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maritalStatus"]) -> typing.Union['MaritalStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marriageDate"]) -> typing.Union[MetaOapg.properties.marriageDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relations"]) -> typing.Union[MetaOapg.properties.relations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bloodGroup"]) -> typing.Union['BloodGroup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentAddress"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permanentAddress"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["professionalSummary"]) -> typing.Union[MetaOapg.properties.professionalSummary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFields"]) -> typing.Union['PersonalDetailsUpdateRequestCustomFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["displayName", "firstName", "middleName", "lastName", "gender", "dateOfBirth", "workPhone", "homePhone", "personalEmail", "skypeId", "maritalStatus", "marriageDate", "relations", "bloodGroup", "currentAddress", "permanentAddress", "professionalSummary", "customFields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        displayName: typing.Union[MetaOapg.properties.displayName, None, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, None, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, None, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, None, str, schemas.Unset] = schemas.unset,
        gender: typing.Union['Gender', schemas.Unset] = schemas.unset,
        dateOfBirth: typing.Union[MetaOapg.properties.dateOfBirth, None, str, datetime, schemas.Unset] = schemas.unset,
        workPhone: typing.Union[MetaOapg.properties.workPhone, None, str, schemas.Unset] = schemas.unset,
        homePhone: typing.Union[MetaOapg.properties.homePhone, None, str, schemas.Unset] = schemas.unset,
        personalEmail: typing.Union[MetaOapg.properties.personalEmail, None, str, schemas.Unset] = schemas.unset,
        skypeId: typing.Union[MetaOapg.properties.skypeId, None, str, schemas.Unset] = schemas.unset,
        maritalStatus: typing.Union['MaritalStatus', schemas.Unset] = schemas.unset,
        marriageDate: typing.Union[MetaOapg.properties.marriageDate, None, str, datetime, schemas.Unset] = schemas.unset,
        relations: typing.Union[MetaOapg.properties.relations, list, tuple, None, schemas.Unset] = schemas.unset,
        bloodGroup: typing.Union['BloodGroup', schemas.Unset] = schemas.unset,
        currentAddress: typing.Union['Address', schemas.Unset] = schemas.unset,
        permanentAddress: typing.Union['Address', schemas.Unset] = schemas.unset,
        professionalSummary: typing.Union[MetaOapg.properties.professionalSummary, None, str, schemas.Unset] = schemas.unset,
        customFields: typing.Union['PersonalDetailsUpdateRequestCustomFields', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PersonalDetailsUpdateRequest':
        return super().__new__(
            cls,
            *args,
            displayName=displayName,
            firstName=firstName,
            middleName=middleName,
            lastName=lastName,
            gender=gender,
            dateOfBirth=dateOfBirth,
            workPhone=workPhone,
            homePhone=homePhone,
            personalEmail=personalEmail,
            skypeId=skypeId,
            maritalStatus=maritalStatus,
            marriageDate=marriageDate,
            relations=relations,
            bloodGroup=bloodGroup,
            currentAddress=currentAddress,
            permanentAddress=permanentAddress,
            professionalSummary=professionalSummary,
            customFields=customFields,
            _configuration=_configuration,
            **kwargs,
        )

from keka_hr_python_sdk.model.address import Address
from keka_hr_python_sdk.model.blood_group import BloodGroup
from keka_hr_python_sdk.model.gender import Gender
from keka_hr_python_sdk.model.marital_status import MaritalStatus
from keka_hr_python_sdk.model.personal_details_update_request_custom_fields import PersonalDetailsUpdateRequestCustomFields
from keka_hr_python_sdk.model.relation import Relation
