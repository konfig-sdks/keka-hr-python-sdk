# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from keka_hr_python_sdk import schemas  # noqa: F401


class APIGoal(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['APIGoalTags']:
                return APIGoalTags
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employeeId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employeeId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employeeNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employeeNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class timeFrameId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'timeFrameId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            startDate = schemas.DateTimeSchema
            endDate = schemas.DateTimeSchema
            initialValue = schemas.Float64Schema
            targetValue = schemas.Float64Schema
            currentValue = schemas.Float64Schema
            progress = schemas.Float64Schema
        
            @staticmethod
            def metricType() -> typing.Type['GoalMetricType']:
                return GoalMetricType
        
            @staticmethod
            def status() -> typing.Type['GoalStatus']:
                return GoalStatus
        
            @staticmethod
            def type() -> typing.Type['GoalType']:
                return GoalType
            
            
            class departmentId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'departmentId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def parentGoal() -> typing.Type['APIBaseGoal']:
                return APIBaseGoal
            
            
            class childGoals(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['APIBaseGoal']:
                        return APIBaseGoal
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'childGoals':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            isPrivate = schemas.BoolSchema
            __annotations__ = {
                "tags": tags,
                "description": description,
                "id": id,
                "employeeId": employeeId,
                "employeeNumber": employeeNumber,
                "timeFrameId": timeFrameId,
                "name": name,
                "startDate": startDate,
                "endDate": endDate,
                "initialValue": initialValue,
                "targetValue": targetValue,
                "currentValue": currentValue,
                "progress": progress,
                "metricType": metricType,
                "status": status,
                "type": type,
                "departmentId": departmentId,
                "parentGoal": parentGoal,
                "childGoals": childGoals,
                "isPrivate": isPrivate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'APIGoalTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeFrameId"]) -> MetaOapg.properties.timeFrameId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initialValue"]) -> MetaOapg.properties.initialValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetValue"]) -> MetaOapg.properties.targetValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentValue"]) -> MetaOapg.properties.currentValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progress"]) -> MetaOapg.properties.progress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metricType"]) -> 'GoalMetricType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'GoalStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'GoalType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentId"]) -> MetaOapg.properties.departmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentGoal"]) -> 'APIBaseGoal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["childGoals"]) -> MetaOapg.properties.childGoals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPrivate"]) -> MetaOapg.properties.isPrivate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "description", "id", "employeeId", "employeeNumber", "timeFrameId", "name", "startDate", "endDate", "initialValue", "targetValue", "currentValue", "progress", "metricType", "status", "type", "departmentId", "parentGoal", "childGoals", "isPrivate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['APIGoalTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeFrameId"]) -> typing.Union[MetaOapg.properties.timeFrameId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initialValue"]) -> typing.Union[MetaOapg.properties.initialValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetValue"]) -> typing.Union[MetaOapg.properties.targetValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentValue"]) -> typing.Union[MetaOapg.properties.currentValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progress"]) -> typing.Union[MetaOapg.properties.progress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metricType"]) -> typing.Union['GoalMetricType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['GoalStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['GoalType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentId"]) -> typing.Union[MetaOapg.properties.departmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentGoal"]) -> typing.Union['APIBaseGoal', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["childGoals"]) -> typing.Union[MetaOapg.properties.childGoals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPrivate"]) -> typing.Union[MetaOapg.properties.isPrivate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "description", "id", "employeeId", "employeeNumber", "timeFrameId", "name", "startDate", "endDate", "initialValue", "targetValue", "currentValue", "progress", "metricType", "status", "type", "departmentId", "parentGoal", "childGoals", "isPrivate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['APIGoalTags', schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, None, str, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, None, str, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, None, str, schemas.Unset] = schemas.unset,
        timeFrameId: typing.Union[MetaOapg.properties.timeFrameId, None, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, datetime, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, datetime, schemas.Unset] = schemas.unset,
        initialValue: typing.Union[MetaOapg.properties.initialValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        targetValue: typing.Union[MetaOapg.properties.targetValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currentValue: typing.Union[MetaOapg.properties.currentValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        progress: typing.Union[MetaOapg.properties.progress, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        metricType: typing.Union['GoalMetricType', schemas.Unset] = schemas.unset,
        status: typing.Union['GoalStatus', schemas.Unset] = schemas.unset,
        type: typing.Union['GoalType', schemas.Unset] = schemas.unset,
        departmentId: typing.Union[MetaOapg.properties.departmentId, None, str, schemas.Unset] = schemas.unset,
        parentGoal: typing.Union['APIBaseGoal', schemas.Unset] = schemas.unset,
        childGoals: typing.Union[MetaOapg.properties.childGoals, list, tuple, None, schemas.Unset] = schemas.unset,
        isPrivate: typing.Union[MetaOapg.properties.isPrivate, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APIGoal':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            description=description,
            id=id,
            employeeId=employeeId,
            employeeNumber=employeeNumber,
            timeFrameId=timeFrameId,
            name=name,
            startDate=startDate,
            endDate=endDate,
            initialValue=initialValue,
            targetValue=targetValue,
            currentValue=currentValue,
            progress=progress,
            metricType=metricType,
            status=status,
            type=type,
            departmentId=departmentId,
            parentGoal=parentGoal,
            childGoals=childGoals,
            isPrivate=isPrivate,
            _configuration=_configuration,
            **kwargs,
        )

from keka_hr_python_sdk.model.api_base_goal import APIBaseGoal
from keka_hr_python_sdk.model.api_goal_tags import APIGoalTags
from keka_hr_python_sdk.model.goal_metric_type import GoalMetricType
from keka_hr_python_sdk.model.goal_status import GoalStatus
from keka_hr_python_sdk.model.goal_type import GoalType
