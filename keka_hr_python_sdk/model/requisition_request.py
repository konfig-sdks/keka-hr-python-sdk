# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from keka_hr_python_sdk import schemas  # noqa: F401


class RequisitionRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class requisitionFor(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'requisitionFor':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class jobNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class department(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'department':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class subDepartment(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subDepartment':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class requestedBy(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'requestedBy':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            requestedOn = schemas.DateTimeSchema
        
            @staticmethod
            def locations() -> typing.Type['RequisitionRequestLocations']:
                return RequisitionRequestLocations
        
            @staticmethod
            def status() -> typing.Type['RequisitionRequestStatus']:
                return RequisitionRequestStatus
            isPriority = schemas.BoolSchema
            
            
            class budget(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'budget':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            openPositions = schemas.Int32Schema
            
            
            class hired(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hired':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def requisitionTypes() -> typing.Type['RequisitionRequestRequisitionTypes']:
                return RequisitionRequestRequisitionTypes
            
            
            class toBeReplaced(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReplacementEmployee']:
                        return ReplacementEmployee
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'toBeReplaced':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def jobType() -> typing.Type['JobType']:
                return JobType
            
            
            class targetHiringDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targetHiringDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            isArchived = schemas.BoolSchema
            
            
            class additionalComments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additionalComments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class additionalFields(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomField']:
                        return CustomField
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additionalFields':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "requisitionFor": requisitionFor,
                "jobNumber": jobNumber,
                "department": department,
                "subDepartment": subDepartment,
                "requestedBy": requestedBy,
                "requestedOn": requestedOn,
                "locations": locations,
                "status": status,
                "isPriority": isPriority,
                "budget": budget,
                "openPositions": openPositions,
                "hired": hired,
                "requisitionTypes": requisitionTypes,
                "toBeReplaced": toBeReplaced,
                "jobType": jobType,
                "targetHiringDate": targetHiringDate,
                "isArchived": isArchived,
                "additionalComments": additionalComments,
                "additionalFields": additionalFields,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requisitionFor"]) -> MetaOapg.properties.requisitionFor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobNumber"]) -> MetaOapg.properties.jobNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> MetaOapg.properties.department: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subDepartment"]) -> MetaOapg.properties.subDepartment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestedBy"]) -> MetaOapg.properties.requestedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestedOn"]) -> MetaOapg.properties.requestedOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locations"]) -> 'RequisitionRequestLocations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'RequisitionRequestStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPriority"]) -> MetaOapg.properties.isPriority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budget"]) -> MetaOapg.properties.budget: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["openPositions"]) -> MetaOapg.properties.openPositions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hired"]) -> MetaOapg.properties.hired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requisitionTypes"]) -> 'RequisitionRequestRequisitionTypes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toBeReplaced"]) -> MetaOapg.properties.toBeReplaced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobType"]) -> 'JobType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetHiringDate"]) -> MetaOapg.properties.targetHiringDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isArchived"]) -> MetaOapg.properties.isArchived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalComments"]) -> MetaOapg.properties.additionalComments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalFields"]) -> MetaOapg.properties.additionalFields: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "requisitionFor", "jobNumber", "department", "subDepartment", "requestedBy", "requestedOn", "locations", "status", "isPriority", "budget", "openPositions", "hired", "requisitionTypes", "toBeReplaced", "jobType", "targetHiringDate", "isArchived", "additionalComments", "additionalFields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requisitionFor"]) -> typing.Union[MetaOapg.properties.requisitionFor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobNumber"]) -> typing.Union[MetaOapg.properties.jobNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union[MetaOapg.properties.department, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subDepartment"]) -> typing.Union[MetaOapg.properties.subDepartment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestedBy"]) -> typing.Union[MetaOapg.properties.requestedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestedOn"]) -> typing.Union[MetaOapg.properties.requestedOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locations"]) -> typing.Union['RequisitionRequestLocations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['RequisitionRequestStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPriority"]) -> typing.Union[MetaOapg.properties.isPriority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budget"]) -> typing.Union[MetaOapg.properties.budget, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["openPositions"]) -> typing.Union[MetaOapg.properties.openPositions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hired"]) -> typing.Union[MetaOapg.properties.hired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requisitionTypes"]) -> typing.Union['RequisitionRequestRequisitionTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toBeReplaced"]) -> typing.Union[MetaOapg.properties.toBeReplaced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobType"]) -> typing.Union['JobType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetHiringDate"]) -> typing.Union[MetaOapg.properties.targetHiringDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isArchived"]) -> typing.Union[MetaOapg.properties.isArchived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalComments"]) -> typing.Union[MetaOapg.properties.additionalComments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalFields"]) -> typing.Union[MetaOapg.properties.additionalFields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "requisitionFor", "jobNumber", "department", "subDepartment", "requestedBy", "requestedOn", "locations", "status", "isPriority", "budget", "openPositions", "hired", "requisitionTypes", "toBeReplaced", "jobType", "targetHiringDate", "isArchived", "additionalComments", "additionalFields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, None, str, schemas.Unset] = schemas.unset,
        requisitionFor: typing.Union[MetaOapg.properties.requisitionFor, None, str, schemas.Unset] = schemas.unset,
        jobNumber: typing.Union[MetaOapg.properties.jobNumber, None, str, schemas.Unset] = schemas.unset,
        department: typing.Union[MetaOapg.properties.department, None, str, schemas.Unset] = schemas.unset,
        subDepartment: typing.Union[MetaOapg.properties.subDepartment, None, str, schemas.Unset] = schemas.unset,
        requestedBy: typing.Union[MetaOapg.properties.requestedBy, None, str, schemas.Unset] = schemas.unset,
        requestedOn: typing.Union[MetaOapg.properties.requestedOn, str, datetime, schemas.Unset] = schemas.unset,
        locations: typing.Union['RequisitionRequestLocations', schemas.Unset] = schemas.unset,
        status: typing.Union['RequisitionRequestStatus', schemas.Unset] = schemas.unset,
        isPriority: typing.Union[MetaOapg.properties.isPriority, bool, schemas.Unset] = schemas.unset,
        budget: typing.Union[MetaOapg.properties.budget, None, str, schemas.Unset] = schemas.unset,
        openPositions: typing.Union[MetaOapg.properties.openPositions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hired: typing.Union[MetaOapg.properties.hired, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        requisitionTypes: typing.Union['RequisitionRequestRequisitionTypes', schemas.Unset] = schemas.unset,
        toBeReplaced: typing.Union[MetaOapg.properties.toBeReplaced, list, tuple, None, schemas.Unset] = schemas.unset,
        jobType: typing.Union['JobType', schemas.Unset] = schemas.unset,
        targetHiringDate: typing.Union[MetaOapg.properties.targetHiringDate, None, str, datetime, schemas.Unset] = schemas.unset,
        isArchived: typing.Union[MetaOapg.properties.isArchived, bool, schemas.Unset] = schemas.unset,
        additionalComments: typing.Union[MetaOapg.properties.additionalComments, None, str, schemas.Unset] = schemas.unset,
        additionalFields: typing.Union[MetaOapg.properties.additionalFields, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RequisitionRequest':
        return super().__new__(
            cls,
            *args,
            id=id,
            requisitionFor=requisitionFor,
            jobNumber=jobNumber,
            department=department,
            subDepartment=subDepartment,
            requestedBy=requestedBy,
            requestedOn=requestedOn,
            locations=locations,
            status=status,
            isPriority=isPriority,
            budget=budget,
            openPositions=openPositions,
            hired=hired,
            requisitionTypes=requisitionTypes,
            toBeReplaced=toBeReplaced,
            jobType=jobType,
            targetHiringDate=targetHiringDate,
            isArchived=isArchived,
            additionalComments=additionalComments,
            additionalFields=additionalFields,
            _configuration=_configuration,
            **kwargs,
        )

from keka_hr_python_sdk.model.custom_field import CustomField
from keka_hr_python_sdk.model.job_type import JobType
from keka_hr_python_sdk.model.replacement_employee import ReplacementEmployee
from keka_hr_python_sdk.model.requisition_request_locations import RequisitionRequestLocations
from keka_hr_python_sdk.model.requisition_request_requisition_types import RequisitionRequestRequisitionTypes
from keka_hr_python_sdk.model.requisition_request_status import RequisitionRequestStatus
