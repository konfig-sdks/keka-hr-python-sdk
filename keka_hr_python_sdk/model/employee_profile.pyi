# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from keka_hr_python_sdk import schemas  # noqa: F401


class EmployeeProfile(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employeeNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employeeNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class firstName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firstName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class middleName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'middleName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class lastName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class displayName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'displayName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class email(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'email':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class city(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'city':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class countryCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'countryCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def image() -> typing.Type['Image']:
                return Image
        
            @staticmethod
            def jobTitle() -> typing.Type['LookupInfo']:
                return LookupInfo
            
            
            class secondaryJobTitle(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'secondaryJobTitle':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def reportsTo() -> typing.Type['EmployeeLookup']:
                return EmployeeLookup
        
            @staticmethod
            def l2Manager() -> typing.Type['EmployeeLookup']:
                return EmployeeLookup
        
            @staticmethod
            def dottedLineManager() -> typing.Type['EmployeeLookup']:
                return EmployeeLookup
        
            @staticmethod
            def contingentType() -> typing.Type['ContingentType']:
                return ContingentType
        
            @staticmethod
            def timeType() -> typing.Type['TimeType']:
                return TimeType
        
            @staticmethod
            def workerType() -> typing.Type['WorkerType']:
                return WorkerType
            isPrivate = schemas.BoolSchema
            isProfileComplete = schemas.BoolSchema
        
            @staticmethod
            def maritalStatus() -> typing.Type['MaritalStatus']:
                return MaritalStatus
            
            
            class marriageDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'marriageDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def gender() -> typing.Type['Gender']:
                return Gender
            joiningDate = schemas.DateTimeSchema
            
            
            class professionalSummary(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'professionalSummary':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dateOfBirth(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateOfBirth':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class resignationSubmittedDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'resignationSubmittedDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class exitDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exitDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def employmentStatus() -> typing.Type['EmploymentStatus']:
                return EmploymentStatus
        
            @staticmethod
            def accountStatus() -> typing.Type['AccountStatus']:
                return AccountStatus
        
            @staticmethod
            def invitationStatus() -> typing.Type['InvitationStatus']:
                return InvitationStatus
        
            @staticmethod
            def exitStatus() -> typing.Type['ExitStatus']:
                return ExitStatus
        
            @staticmethod
            def exitType() -> typing.Type['ExitType']:
                return ExitType
            
            
            class exitReason(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exitReason':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class personalEmail(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'personalEmail':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class workPhone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workPhone':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class homePhone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'homePhone':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mobilePhone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mobilePhone':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def bloodGroup() -> typing.Type['BloodGroup']:
                return BloodGroup
            
            
            class attendanceNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attendanceNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class probationEndDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'probationEndDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def currentAddress() -> typing.Type['Address']:
                return Address
        
            @staticmethod
            def permanentAddress() -> typing.Type['Address']:
                return Address
            
            
            class relations(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Relation']:
                        return Relation
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relations':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class educationDetails(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Education']:
                        return Education
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'educationDetails':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class experienceDetails(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Experience']:
                        return Experience
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'experienceDetails':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class customFields(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomField']:
                        return CustomField
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customFields':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class groups(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GroupLookup']:
                        return GroupLookup
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def leavePlanInfo() -> typing.Type['LookupInfo']:
                return LookupInfo
        
            @staticmethod
            def bandInfo() -> typing.Type['LookupInfo']:
                return LookupInfo
        
            @staticmethod
            def payGradeInfo() -> typing.Type['LookupInfo']:
                return LookupInfo
        
            @staticmethod
            def shiftPolicyInfo() -> typing.Type['LookupInfo']:
                return LookupInfo
        
            @staticmethod
            def weeklyOffPolicyInfo() -> typing.Type['LookupInfo']:
                return LookupInfo
        
            @staticmethod
            def captureSchemeInfo() -> typing.Type['LookupInfo']:
                return LookupInfo
        
            @staticmethod
            def trackingPolicyInfo() -> typing.Type['LookupInfo']:
                return LookupInfo
        
            @staticmethod
            def expensePolicyInfo() -> typing.Type['LookupInfo']:
                return LookupInfo
        
            @staticmethod
            def overtimePolicyInfo() -> typing.Type['LookupInfo']:
                return LookupInfo
            
            
            class identifier(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'identifier':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "employeeNumber": employeeNumber,
                "firstName": firstName,
                "middleName": middleName,
                "lastName": lastName,
                "displayName": displayName,
                "email": email,
                "city": city,
                "countryCode": countryCode,
                "image": image,
                "jobTitle": jobTitle,
                "secondaryJobTitle": secondaryJobTitle,
                "reportsTo": reportsTo,
                "l2Manager": l2Manager,
                "dottedLineManager": dottedLineManager,
                "contingentType": contingentType,
                "timeType": timeType,
                "workerType": workerType,
                "isPrivate": isPrivate,
                "isProfileComplete": isProfileComplete,
                "maritalStatus": maritalStatus,
                "marriageDate": marriageDate,
                "gender": gender,
                "joiningDate": joiningDate,
                "professionalSummary": professionalSummary,
                "dateOfBirth": dateOfBirth,
                "resignationSubmittedDate": resignationSubmittedDate,
                "exitDate": exitDate,
                "employmentStatus": employmentStatus,
                "accountStatus": accountStatus,
                "invitationStatus": invitationStatus,
                "exitStatus": exitStatus,
                "exitType": exitType,
                "exitReason": exitReason,
                "personalEmail": personalEmail,
                "workPhone": workPhone,
                "homePhone": homePhone,
                "mobilePhone": mobilePhone,
                "bloodGroup": bloodGroup,
                "attendanceNumber": attendanceNumber,
                "probationEndDate": probationEndDate,
                "currentAddress": currentAddress,
                "permanentAddress": permanentAddress,
                "relations": relations,
                "educationDetails": educationDetails,
                "experienceDetails": experienceDetails,
                "customFields": customFields,
                "groups": groups,
                "leavePlanInfo": leavePlanInfo,
                "bandInfo": bandInfo,
                "payGradeInfo": payGradeInfo,
                "shiftPolicyInfo": shiftPolicyInfo,
                "weeklyOffPolicyInfo": weeklyOffPolicyInfo,
                "captureSchemeInfo": captureSchemeInfo,
                "trackingPolicyInfo": trackingPolicyInfo,
                "expensePolicyInfo": expensePolicyInfo,
                "overtimePolicyInfo": overtimePolicyInfo,
                "identifier": identifier,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> 'Image': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTitle"]) -> 'LookupInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondaryJobTitle"]) -> MetaOapg.properties.secondaryJobTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportsTo"]) -> 'EmployeeLookup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["l2Manager"]) -> 'EmployeeLookup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dottedLineManager"]) -> 'EmployeeLookup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contingentType"]) -> 'ContingentType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeType"]) -> 'TimeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workerType"]) -> 'WorkerType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPrivate"]) -> MetaOapg.properties.isPrivate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isProfileComplete"]) -> MetaOapg.properties.isProfileComplete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maritalStatus"]) -> 'MaritalStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marriageDate"]) -> MetaOapg.properties.marriageDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> 'Gender': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["joiningDate"]) -> MetaOapg.properties.joiningDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["professionalSummary"]) -> MetaOapg.properties.professionalSummary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resignationSubmittedDate"]) -> MetaOapg.properties.resignationSubmittedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exitDate"]) -> MetaOapg.properties.exitDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentStatus"]) -> 'EmploymentStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountStatus"]) -> 'AccountStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invitationStatus"]) -> 'InvitationStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exitStatus"]) -> 'ExitStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exitType"]) -> 'ExitType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exitReason"]) -> MetaOapg.properties.exitReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personalEmail"]) -> MetaOapg.properties.personalEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhone"]) -> MetaOapg.properties.workPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhone"]) -> MetaOapg.properties.homePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobilePhone"]) -> MetaOapg.properties.mobilePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bloodGroup"]) -> 'BloodGroup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendanceNumber"]) -> MetaOapg.properties.attendanceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["probationEndDate"]) -> MetaOapg.properties.probationEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentAddress"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permanentAddress"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relations"]) -> MetaOapg.properties.relations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["educationDetails"]) -> MetaOapg.properties.educationDetails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["experienceDetails"]) -> MetaOapg.properties.experienceDetails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFields"]) -> MetaOapg.properties.customFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leavePlanInfo"]) -> 'LookupInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bandInfo"]) -> 'LookupInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGradeInfo"]) -> 'LookupInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shiftPolicyInfo"]) -> 'LookupInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weeklyOffPolicyInfo"]) -> 'LookupInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["captureSchemeInfo"]) -> 'LookupInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackingPolicyInfo"]) -> 'LookupInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expensePolicyInfo"]) -> 'LookupInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overtimePolicyInfo"]) -> 'LookupInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "employeeNumber", "firstName", "middleName", "lastName", "displayName", "email", "city", "countryCode", "image", "jobTitle", "secondaryJobTitle", "reportsTo", "l2Manager", "dottedLineManager", "contingentType", "timeType", "workerType", "isPrivate", "isProfileComplete", "maritalStatus", "marriageDate", "gender", "joiningDate", "professionalSummary", "dateOfBirth", "resignationSubmittedDate", "exitDate", "employmentStatus", "accountStatus", "invitationStatus", "exitStatus", "exitType", "exitReason", "personalEmail", "workPhone", "homePhone", "mobilePhone", "bloodGroup", "attendanceNumber", "probationEndDate", "currentAddress", "permanentAddress", "relations", "educationDetails", "experienceDetails", "customFields", "groups", "leavePlanInfo", "bandInfo", "payGradeInfo", "shiftPolicyInfo", "weeklyOffPolicyInfo", "captureSchemeInfo", "trackingPolicyInfo", "expensePolicyInfo", "overtimePolicyInfo", "identifier", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> typing.Union[MetaOapg.properties.countryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union['Image', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTitle"]) -> typing.Union['LookupInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondaryJobTitle"]) -> typing.Union[MetaOapg.properties.secondaryJobTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportsTo"]) -> typing.Union['EmployeeLookup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["l2Manager"]) -> typing.Union['EmployeeLookup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dottedLineManager"]) -> typing.Union['EmployeeLookup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contingentType"]) -> typing.Union['ContingentType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeType"]) -> typing.Union['TimeType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workerType"]) -> typing.Union['WorkerType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPrivate"]) -> typing.Union[MetaOapg.properties.isPrivate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isProfileComplete"]) -> typing.Union[MetaOapg.properties.isProfileComplete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maritalStatus"]) -> typing.Union['MaritalStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marriageDate"]) -> typing.Union[MetaOapg.properties.marriageDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union['Gender', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["joiningDate"]) -> typing.Union[MetaOapg.properties.joiningDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["professionalSummary"]) -> typing.Union[MetaOapg.properties.professionalSummary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBirth"]) -> typing.Union[MetaOapg.properties.dateOfBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resignationSubmittedDate"]) -> typing.Union[MetaOapg.properties.resignationSubmittedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exitDate"]) -> typing.Union[MetaOapg.properties.exitDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentStatus"]) -> typing.Union['EmploymentStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountStatus"]) -> typing.Union['AccountStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invitationStatus"]) -> typing.Union['InvitationStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exitStatus"]) -> typing.Union['ExitStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exitType"]) -> typing.Union['ExitType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exitReason"]) -> typing.Union[MetaOapg.properties.exitReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personalEmail"]) -> typing.Union[MetaOapg.properties.personalEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhone"]) -> typing.Union[MetaOapg.properties.workPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhone"]) -> typing.Union[MetaOapg.properties.homePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobilePhone"]) -> typing.Union[MetaOapg.properties.mobilePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bloodGroup"]) -> typing.Union['BloodGroup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendanceNumber"]) -> typing.Union[MetaOapg.properties.attendanceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["probationEndDate"]) -> typing.Union[MetaOapg.properties.probationEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentAddress"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permanentAddress"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relations"]) -> typing.Union[MetaOapg.properties.relations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["educationDetails"]) -> typing.Union[MetaOapg.properties.educationDetails, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["experienceDetails"]) -> typing.Union[MetaOapg.properties.experienceDetails, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFields"]) -> typing.Union[MetaOapg.properties.customFields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> typing.Union[MetaOapg.properties.groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leavePlanInfo"]) -> typing.Union['LookupInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bandInfo"]) -> typing.Union['LookupInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGradeInfo"]) -> typing.Union['LookupInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shiftPolicyInfo"]) -> typing.Union['LookupInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weeklyOffPolicyInfo"]) -> typing.Union['LookupInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["captureSchemeInfo"]) -> typing.Union['LookupInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackingPolicyInfo"]) -> typing.Union['LookupInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expensePolicyInfo"]) -> typing.Union['LookupInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overtimePolicyInfo"]) -> typing.Union['LookupInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> typing.Union[MetaOapg.properties.identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "employeeNumber", "firstName", "middleName", "lastName", "displayName", "email", "city", "countryCode", "image", "jobTitle", "secondaryJobTitle", "reportsTo", "l2Manager", "dottedLineManager", "contingentType", "timeType", "workerType", "isPrivate", "isProfileComplete", "maritalStatus", "marriageDate", "gender", "joiningDate", "professionalSummary", "dateOfBirth", "resignationSubmittedDate", "exitDate", "employmentStatus", "accountStatus", "invitationStatus", "exitStatus", "exitType", "exitReason", "personalEmail", "workPhone", "homePhone", "mobilePhone", "bloodGroup", "attendanceNumber", "probationEndDate", "currentAddress", "permanentAddress", "relations", "educationDetails", "experienceDetails", "customFields", "groups", "leavePlanInfo", "bandInfo", "payGradeInfo", "shiftPolicyInfo", "weeklyOffPolicyInfo", "captureSchemeInfo", "trackingPolicyInfo", "expensePolicyInfo", "overtimePolicyInfo", "identifier", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, None, str, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, None, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, None, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, None, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, None, str, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, None, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, None, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, None, str, schemas.Unset] = schemas.unset,
        countryCode: typing.Union[MetaOapg.properties.countryCode, None, str, schemas.Unset] = schemas.unset,
        image: typing.Union['Image', schemas.Unset] = schemas.unset,
        jobTitle: typing.Union['LookupInfo', schemas.Unset] = schemas.unset,
        secondaryJobTitle: typing.Union[MetaOapg.properties.secondaryJobTitle, None, str, schemas.Unset] = schemas.unset,
        reportsTo: typing.Union['EmployeeLookup', schemas.Unset] = schemas.unset,
        l2Manager: typing.Union['EmployeeLookup', schemas.Unset] = schemas.unset,
        dottedLineManager: typing.Union['EmployeeLookup', schemas.Unset] = schemas.unset,
        contingentType: typing.Union['ContingentType', schemas.Unset] = schemas.unset,
        timeType: typing.Union['TimeType', schemas.Unset] = schemas.unset,
        workerType: typing.Union['WorkerType', schemas.Unset] = schemas.unset,
        isPrivate: typing.Union[MetaOapg.properties.isPrivate, bool, schemas.Unset] = schemas.unset,
        isProfileComplete: typing.Union[MetaOapg.properties.isProfileComplete, bool, schemas.Unset] = schemas.unset,
        maritalStatus: typing.Union['MaritalStatus', schemas.Unset] = schemas.unset,
        marriageDate: typing.Union[MetaOapg.properties.marriageDate, None, str, datetime, schemas.Unset] = schemas.unset,
        gender: typing.Union['Gender', schemas.Unset] = schemas.unset,
        joiningDate: typing.Union[MetaOapg.properties.joiningDate, str, datetime, schemas.Unset] = schemas.unset,
        professionalSummary: typing.Union[MetaOapg.properties.professionalSummary, None, str, schemas.Unset] = schemas.unset,
        dateOfBirth: typing.Union[MetaOapg.properties.dateOfBirth, None, str, datetime, schemas.Unset] = schemas.unset,
        resignationSubmittedDate: typing.Union[MetaOapg.properties.resignationSubmittedDate, None, str, datetime, schemas.Unset] = schemas.unset,
        exitDate: typing.Union[MetaOapg.properties.exitDate, None, str, datetime, schemas.Unset] = schemas.unset,
        employmentStatus: typing.Union['EmploymentStatus', schemas.Unset] = schemas.unset,
        accountStatus: typing.Union['AccountStatus', schemas.Unset] = schemas.unset,
        invitationStatus: typing.Union['InvitationStatus', schemas.Unset] = schemas.unset,
        exitStatus: typing.Union['ExitStatus', schemas.Unset] = schemas.unset,
        exitType: typing.Union['ExitType', schemas.Unset] = schemas.unset,
        exitReason: typing.Union[MetaOapg.properties.exitReason, None, str, schemas.Unset] = schemas.unset,
        personalEmail: typing.Union[MetaOapg.properties.personalEmail, None, str, schemas.Unset] = schemas.unset,
        workPhone: typing.Union[MetaOapg.properties.workPhone, None, str, schemas.Unset] = schemas.unset,
        homePhone: typing.Union[MetaOapg.properties.homePhone, None, str, schemas.Unset] = schemas.unset,
        mobilePhone: typing.Union[MetaOapg.properties.mobilePhone, None, str, schemas.Unset] = schemas.unset,
        bloodGroup: typing.Union['BloodGroup', schemas.Unset] = schemas.unset,
        attendanceNumber: typing.Union[MetaOapg.properties.attendanceNumber, None, str, schemas.Unset] = schemas.unset,
        probationEndDate: typing.Union[MetaOapg.properties.probationEndDate, None, str, datetime, schemas.Unset] = schemas.unset,
        currentAddress: typing.Union['Address', schemas.Unset] = schemas.unset,
        permanentAddress: typing.Union['Address', schemas.Unset] = schemas.unset,
        relations: typing.Union[MetaOapg.properties.relations, list, tuple, None, schemas.Unset] = schemas.unset,
        educationDetails: typing.Union[MetaOapg.properties.educationDetails, list, tuple, None, schemas.Unset] = schemas.unset,
        experienceDetails: typing.Union[MetaOapg.properties.experienceDetails, list, tuple, None, schemas.Unset] = schemas.unset,
        customFields: typing.Union[MetaOapg.properties.customFields, list, tuple, None, schemas.Unset] = schemas.unset,
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, None, schemas.Unset] = schemas.unset,
        leavePlanInfo: typing.Union['LookupInfo', schemas.Unset] = schemas.unset,
        bandInfo: typing.Union['LookupInfo', schemas.Unset] = schemas.unset,
        payGradeInfo: typing.Union['LookupInfo', schemas.Unset] = schemas.unset,
        shiftPolicyInfo: typing.Union['LookupInfo', schemas.Unset] = schemas.unset,
        weeklyOffPolicyInfo: typing.Union['LookupInfo', schemas.Unset] = schemas.unset,
        captureSchemeInfo: typing.Union['LookupInfo', schemas.Unset] = schemas.unset,
        trackingPolicyInfo: typing.Union['LookupInfo', schemas.Unset] = schemas.unset,
        expensePolicyInfo: typing.Union['LookupInfo', schemas.Unset] = schemas.unset,
        overtimePolicyInfo: typing.Union['LookupInfo', schemas.Unset] = schemas.unset,
        identifier: typing.Union[MetaOapg.properties.identifier, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeProfile':
        return super().__new__(
            cls,
            *args,
            id=id,
            employeeNumber=employeeNumber,
            firstName=firstName,
            middleName=middleName,
            lastName=lastName,
            displayName=displayName,
            email=email,
            city=city,
            countryCode=countryCode,
            image=image,
            jobTitle=jobTitle,
            secondaryJobTitle=secondaryJobTitle,
            reportsTo=reportsTo,
            l2Manager=l2Manager,
            dottedLineManager=dottedLineManager,
            contingentType=contingentType,
            timeType=timeType,
            workerType=workerType,
            isPrivate=isPrivate,
            isProfileComplete=isProfileComplete,
            maritalStatus=maritalStatus,
            marriageDate=marriageDate,
            gender=gender,
            joiningDate=joiningDate,
            professionalSummary=professionalSummary,
            dateOfBirth=dateOfBirth,
            resignationSubmittedDate=resignationSubmittedDate,
            exitDate=exitDate,
            employmentStatus=employmentStatus,
            accountStatus=accountStatus,
            invitationStatus=invitationStatus,
            exitStatus=exitStatus,
            exitType=exitType,
            exitReason=exitReason,
            personalEmail=personalEmail,
            workPhone=workPhone,
            homePhone=homePhone,
            mobilePhone=mobilePhone,
            bloodGroup=bloodGroup,
            attendanceNumber=attendanceNumber,
            probationEndDate=probationEndDate,
            currentAddress=currentAddress,
            permanentAddress=permanentAddress,
            relations=relations,
            educationDetails=educationDetails,
            experienceDetails=experienceDetails,
            customFields=customFields,
            groups=groups,
            leavePlanInfo=leavePlanInfo,
            bandInfo=bandInfo,
            payGradeInfo=payGradeInfo,
            shiftPolicyInfo=shiftPolicyInfo,
            weeklyOffPolicyInfo=weeklyOffPolicyInfo,
            captureSchemeInfo=captureSchemeInfo,
            trackingPolicyInfo=trackingPolicyInfo,
            expensePolicyInfo=expensePolicyInfo,
            overtimePolicyInfo=overtimePolicyInfo,
            identifier=identifier,
            _configuration=_configuration,
            **kwargs,
        )

from keka_hr_python_sdk.model.account_status import AccountStatus
from keka_hr_python_sdk.model.address import Address
from keka_hr_python_sdk.model.blood_group import BloodGroup
from keka_hr_python_sdk.model.contingent_type import ContingentType
from keka_hr_python_sdk.model.custom_field import CustomField
from keka_hr_python_sdk.model.education import Education
from keka_hr_python_sdk.model.employee_lookup import EmployeeLookup
from keka_hr_python_sdk.model.employment_status import EmploymentStatus
from keka_hr_python_sdk.model.exit_status import ExitStatus
from keka_hr_python_sdk.model.exit_type import ExitType
from keka_hr_python_sdk.model.experience import Experience
from keka_hr_python_sdk.model.gender import Gender
from keka_hr_python_sdk.model.group_lookup import GroupLookup
from keka_hr_python_sdk.model.image import Image
from keka_hr_python_sdk.model.invitation_status import InvitationStatus
from keka_hr_python_sdk.model.lookup_info import LookupInfo
from keka_hr_python_sdk.model.marital_status import MaritalStatus
from keka_hr_python_sdk.model.relation import Relation
from keka_hr_python_sdk.model.time_type import TimeType
from keka_hr_python_sdk.model.worker_type import WorkerType
