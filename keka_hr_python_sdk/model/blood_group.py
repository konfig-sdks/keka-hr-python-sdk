# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from keka_hr_python_sdk import schemas  # noqa: F401


class BloodGroup(
    schemas.EnumBase,
    schemas.Int32Schema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        format = 'int32'
        enum_value_to_name = {
            0: "POSITIVE_0",
            1: "POSITIVE_1",
            2: "POSITIVE_2",
            3: "POSITIVE_3",
            4: "POSITIVE_4",
            5: "POSITIVE_5",
            6: "POSITIVE_6",
            7: "POSITIVE_7",
            8: "POSITIVE_8",
            9: "POSITIVE_9",
            10: "POSITIVE_10",
            11: "POSITIVE_11",
            12: "POSITIVE_12",
            13: "POSITIVE_13",
            14: "POSITIVE_14",
            15: "POSITIVE_15",
            16: "POSITIVE_16",
            17: "POSITIVE_17",
        }
    
    @schemas.classproperty
    def POSITIVE_0(cls):
        return cls(0)
    
    @schemas.classproperty
    def POSITIVE_1(cls):
        return cls(1)
    
    @schemas.classproperty
    def POSITIVE_2(cls):
        return cls(2)
    
    @schemas.classproperty
    def POSITIVE_3(cls):
        return cls(3)
    
    @schemas.classproperty
    def POSITIVE_4(cls):
        return cls(4)
    
    @schemas.classproperty
    def POSITIVE_5(cls):
        return cls(5)
    
    @schemas.classproperty
    def POSITIVE_6(cls):
        return cls(6)
    
    @schemas.classproperty
    def POSITIVE_7(cls):
        return cls(7)
    
    @schemas.classproperty
    def POSITIVE_8(cls):
        return cls(8)
    
    @schemas.classproperty
    def POSITIVE_9(cls):
        return cls(9)
    
    @schemas.classproperty
    def POSITIVE_10(cls):
        return cls(10)
    
    @schemas.classproperty
    def POSITIVE_11(cls):
        return cls(11)
    
    @schemas.classproperty
    def POSITIVE_12(cls):
        return cls(12)
    
    @schemas.classproperty
    def POSITIVE_13(cls):
        return cls(13)
    
    @schemas.classproperty
    def POSITIVE_14(cls):
        return cls(14)
    
    @schemas.classproperty
    def POSITIVE_15(cls):
        return cls(15)
    
    @schemas.classproperty
    def POSITIVE_16(cls):
        return cls(16)
    
    @schemas.classproperty
    def POSITIVE_17(cls):
        return cls(17)
