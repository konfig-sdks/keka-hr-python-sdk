# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from keka_hr_python_sdk import schemas  # noqa: F401


class JobDTO(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'title':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class noOfOpenings(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'noOfOpenings':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class departmentName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'departmentName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class jobType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            isReferralEnabled = schemas.BoolSchema
            isCreatedFromRequisition = schemas.BoolSchema
            
            
            class requisitionIdentifier(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'requisitionIdentifier':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            canAllowInternalEmployees = schemas.BoolSchema
            
            
            class orgJobId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orgJobId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class jobLocations(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LocationDTO']:
                        return LocationDTO
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobLocations':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class hiringTeam(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['HiringTeamDTO']:
                        return HiringTeamDTO
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hiringTeam':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class careerPortalUrl(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'careerPortalUrl':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class targetHireDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'targetHireDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def status() -> typing.Type['JobStatus']:
                return JobStatus
            
            
            class createdOn(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'createdOn':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class publishedOn(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'publishedOn':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class experience(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'experience':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class customFields(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['JobCustomFieldDTO']:
                        return JobCustomFieldDTO
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customFields':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "title": title,
                "description": description,
                "id": id,
                "noOfOpenings": noOfOpenings,
                "departmentName": departmentName,
                "jobType": jobType,
                "isReferralEnabled": isReferralEnabled,
                "isCreatedFromRequisition": isCreatedFromRequisition,
                "requisitionIdentifier": requisitionIdentifier,
                "canAllowInternalEmployees": canAllowInternalEmployees,
                "orgJobId": orgJobId,
                "jobLocations": jobLocations,
                "hiringTeam": hiringTeam,
                "careerPortalUrl": careerPortalUrl,
                "targetHireDate": targetHireDate,
                "status": status,
                "createdOn": createdOn,
                "publishedOn": publishedOn,
                "experience": experience,
                "customFields": customFields,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noOfOpenings"]) -> MetaOapg.properties.noOfOpenings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentName"]) -> MetaOapg.properties.departmentName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobType"]) -> MetaOapg.properties.jobType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isReferralEnabled"]) -> MetaOapg.properties.isReferralEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCreatedFromRequisition"]) -> MetaOapg.properties.isCreatedFromRequisition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requisitionIdentifier"]) -> MetaOapg.properties.requisitionIdentifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canAllowInternalEmployees"]) -> MetaOapg.properties.canAllowInternalEmployees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgJobId"]) -> MetaOapg.properties.orgJobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobLocations"]) -> MetaOapg.properties.jobLocations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hiringTeam"]) -> MetaOapg.properties.hiringTeam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["careerPortalUrl"]) -> MetaOapg.properties.careerPortalUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetHireDate"]) -> MetaOapg.properties.targetHireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'JobStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdOn"]) -> MetaOapg.properties.createdOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publishedOn"]) -> MetaOapg.properties.publishedOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["experience"]) -> MetaOapg.properties.experience: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFields"]) -> MetaOapg.properties.customFields: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "id", "noOfOpenings", "departmentName", "jobType", "isReferralEnabled", "isCreatedFromRequisition", "requisitionIdentifier", "canAllowInternalEmployees", "orgJobId", "jobLocations", "hiringTeam", "careerPortalUrl", "targetHireDate", "status", "createdOn", "publishedOn", "experience", "customFields", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noOfOpenings"]) -> typing.Union[MetaOapg.properties.noOfOpenings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentName"]) -> typing.Union[MetaOapg.properties.departmentName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobType"]) -> typing.Union[MetaOapg.properties.jobType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isReferralEnabled"]) -> typing.Union[MetaOapg.properties.isReferralEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCreatedFromRequisition"]) -> typing.Union[MetaOapg.properties.isCreatedFromRequisition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requisitionIdentifier"]) -> typing.Union[MetaOapg.properties.requisitionIdentifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canAllowInternalEmployees"]) -> typing.Union[MetaOapg.properties.canAllowInternalEmployees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgJobId"]) -> typing.Union[MetaOapg.properties.orgJobId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobLocations"]) -> typing.Union[MetaOapg.properties.jobLocations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hiringTeam"]) -> typing.Union[MetaOapg.properties.hiringTeam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["careerPortalUrl"]) -> typing.Union[MetaOapg.properties.careerPortalUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetHireDate"]) -> typing.Union[MetaOapg.properties.targetHireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['JobStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdOn"]) -> typing.Union[MetaOapg.properties.createdOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publishedOn"]) -> typing.Union[MetaOapg.properties.publishedOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["experience"]) -> typing.Union[MetaOapg.properties.experience, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFields"]) -> typing.Union[MetaOapg.properties.customFields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "id", "noOfOpenings", "departmentName", "jobType", "isReferralEnabled", "isCreatedFromRequisition", "requisitionIdentifier", "canAllowInternalEmployees", "orgJobId", "jobLocations", "hiringTeam", "careerPortalUrl", "targetHireDate", "status", "createdOn", "publishedOn", "experience", "customFields", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, None, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, None, str, schemas.Unset] = schemas.unset,
        noOfOpenings: typing.Union[MetaOapg.properties.noOfOpenings, None, str, schemas.Unset] = schemas.unset,
        departmentName: typing.Union[MetaOapg.properties.departmentName, None, str, schemas.Unset] = schemas.unset,
        jobType: typing.Union[MetaOapg.properties.jobType, None, str, schemas.Unset] = schemas.unset,
        isReferralEnabled: typing.Union[MetaOapg.properties.isReferralEnabled, bool, schemas.Unset] = schemas.unset,
        isCreatedFromRequisition: typing.Union[MetaOapg.properties.isCreatedFromRequisition, bool, schemas.Unset] = schemas.unset,
        requisitionIdentifier: typing.Union[MetaOapg.properties.requisitionIdentifier, None, str, schemas.Unset] = schemas.unset,
        canAllowInternalEmployees: typing.Union[MetaOapg.properties.canAllowInternalEmployees, bool, schemas.Unset] = schemas.unset,
        orgJobId: typing.Union[MetaOapg.properties.orgJobId, None, str, schemas.Unset] = schemas.unset,
        jobLocations: typing.Union[MetaOapg.properties.jobLocations, list, tuple, None, schemas.Unset] = schemas.unset,
        hiringTeam: typing.Union[MetaOapg.properties.hiringTeam, list, tuple, None, schemas.Unset] = schemas.unset,
        careerPortalUrl: typing.Union[MetaOapg.properties.careerPortalUrl, None, str, schemas.Unset] = schemas.unset,
        targetHireDate: typing.Union[MetaOapg.properties.targetHireDate, None, str, schemas.Unset] = schemas.unset,
        status: typing.Union['JobStatus', schemas.Unset] = schemas.unset,
        createdOn: typing.Union[MetaOapg.properties.createdOn, None, str, schemas.Unset] = schemas.unset,
        publishedOn: typing.Union[MetaOapg.properties.publishedOn, None, str, schemas.Unset] = schemas.unset,
        experience: typing.Union[MetaOapg.properties.experience, None, str, schemas.Unset] = schemas.unset,
        customFields: typing.Union[MetaOapg.properties.customFields, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobDTO':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            id=id,
            noOfOpenings=noOfOpenings,
            departmentName=departmentName,
            jobType=jobType,
            isReferralEnabled=isReferralEnabled,
            isCreatedFromRequisition=isCreatedFromRequisition,
            requisitionIdentifier=requisitionIdentifier,
            canAllowInternalEmployees=canAllowInternalEmployees,
            orgJobId=orgJobId,
            jobLocations=jobLocations,
            hiringTeam=hiringTeam,
            careerPortalUrl=careerPortalUrl,
            targetHireDate=targetHireDate,
            status=status,
            createdOn=createdOn,
            publishedOn=publishedOn,
            experience=experience,
            customFields=customFields,
            _configuration=_configuration,
            **kwargs,
        )

from keka_hr_python_sdk.model.hiring_team_dto import HiringTeamDTO
from keka_hr_python_sdk.model.job_custom_field_dto import JobCustomFieldDTO
from keka_hr_python_sdk.model.job_status import JobStatus
from keka_hr_python_sdk.model.location_dto import LocationDTO
