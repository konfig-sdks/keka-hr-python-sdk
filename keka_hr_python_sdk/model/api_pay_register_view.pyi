# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from keka_hr_python_sdk import schemas  # noqa: F401


class APIPayRegisterView(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class identifier(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'identifier':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employeeNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employeeNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class employeeName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employeeName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class panNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'panNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dateJoined(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateJoined':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class jobTitle(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jobTitle':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class department(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'department':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class location(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'location':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class payGroup(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payGroup':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def employmentStatus() -> typing.Type['EmploymentStatus']:
                return EmploymentStatus
        
            @staticmethod
            def workerType() -> typing.Type['WorkerType']:
                return WorkerType
            
            
            class costCenter(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'costCenter':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class businessUnit(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'businessUnit':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def remunerationType() -> typing.Type['RemunerationType']:
                return RemunerationType
        
            @staticmethod
            def gender() -> typing.Type['Gender']:
                return Gender
            
            
            class dateOfBirth(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateOfBirth':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class exitDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exitDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class cycleIdentifier(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cycleIdentifier':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            cycleFrom = schemas.DateTimeSchema
            cycleTo = schemas.DateTimeSchema
            
            
            class cycleMonthName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cycleMonthName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            cycleMonth = schemas.Int32Schema
            cycleYear = schemas.Int32Schema
            cyclePayDays = schemas.Float64Schema
            workingDays = schemas.Float64Schema
            lossOfPayDays = schemas.Float64Schema
            noOfPayDays = schemas.Float64Schema
            
            
            class renumerationAmount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'renumerationAmount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def status() -> typing.Type['EmployeePayrollCycleRunStatus']:
                return EmployeePayrollCycleRunStatus
            
            
            class statusDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statusDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class earnings(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayItemView']:
                        return PayItemView
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'earnings':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class contributions(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayItemView']:
                        return PayItemView
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contributions':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class deductions(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayItemView']:
                        return PayItemView
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deductions':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class reimbursements(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayItemView']:
                        return PayItemView
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reimbursements':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class outsideGrossPayables(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PayItemView']:
                        return PayItemView
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'outsideGrossPayables':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            grossAmount = schemas.Float64Schema
            totalOutsideGrossAmount = schemas.Float64Schema
            total = schemas.Float64Schema
            totalContributions = schemas.Float64Schema
            totalDeductions = schemas.Float64Schema
            totalReimbursements = schemas.Float64Schema
            cashAdvanceAmount = schemas.Float64Schema
            cashAdvanceSettlementAmount = schemas.Float64Schema
            netAmount = schemas.Float64Schema
            __annotations__ = {
                "identifier": identifier,
                "employeeNumber": employeeNumber,
                "employeeName": employeeName,
                "panNumber": panNumber,
                "dateJoined": dateJoined,
                "jobTitle": jobTitle,
                "department": department,
                "location": location,
                "payGroup": payGroup,
                "employmentStatus": employmentStatus,
                "workerType": workerType,
                "costCenter": costCenter,
                "businessUnit": businessUnit,
                "remunerationType": remunerationType,
                "gender": gender,
                "dateOfBirth": dateOfBirth,
                "exitDate": exitDate,
                "cycleIdentifier": cycleIdentifier,
                "cycleFrom": cycleFrom,
                "cycleTo": cycleTo,
                "cycleMonthName": cycleMonthName,
                "cycleMonth": cycleMonth,
                "cycleYear": cycleYear,
                "cyclePayDays": cyclePayDays,
                "workingDays": workingDays,
                "lossOfPayDays": lossOfPayDays,
                "noOfPayDays": noOfPayDays,
                "renumerationAmount": renumerationAmount,
                "status": status,
                "statusDescription": statusDescription,
                "earnings": earnings,
                "contributions": contributions,
                "deductions": deductions,
                "reimbursements": reimbursements,
                "outsideGrossPayables": outsideGrossPayables,
                "grossAmount": grossAmount,
                "totalOutsideGrossAmount": totalOutsideGrossAmount,
                "total": total,
                "totalContributions": totalContributions,
                "totalDeductions": totalDeductions,
                "totalReimbursements": totalReimbursements,
                "cashAdvanceAmount": cashAdvanceAmount,
                "cashAdvanceSettlementAmount": cashAdvanceSettlementAmount,
                "netAmount": netAmount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeNumber"]) -> MetaOapg.properties.employeeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeName"]) -> MetaOapg.properties.employeeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["panNumber"]) -> MetaOapg.properties.panNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateJoined"]) -> MetaOapg.properties.dateJoined: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTitle"]) -> MetaOapg.properties.jobTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> MetaOapg.properties.department: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroup"]) -> MetaOapg.properties.payGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentStatus"]) -> 'EmploymentStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workerType"]) -> 'WorkerType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter"]) -> MetaOapg.properties.costCenter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessUnit"]) -> MetaOapg.properties.businessUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remunerationType"]) -> 'RemunerationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> 'Gender': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfBirth"]) -> MetaOapg.properties.dateOfBirth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exitDate"]) -> MetaOapg.properties.exitDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycleIdentifier"]) -> MetaOapg.properties.cycleIdentifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycleFrom"]) -> MetaOapg.properties.cycleFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycleTo"]) -> MetaOapg.properties.cycleTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycleMonthName"]) -> MetaOapg.properties.cycleMonthName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycleMonth"]) -> MetaOapg.properties.cycleMonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycleYear"]) -> MetaOapg.properties.cycleYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cyclePayDays"]) -> MetaOapg.properties.cyclePayDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workingDays"]) -> MetaOapg.properties.workingDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lossOfPayDays"]) -> MetaOapg.properties.lossOfPayDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noOfPayDays"]) -> MetaOapg.properties.noOfPayDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renumerationAmount"]) -> MetaOapg.properties.renumerationAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'EmployeePayrollCycleRunStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusDescription"]) -> MetaOapg.properties.statusDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earnings"]) -> MetaOapg.properties.earnings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributions"]) -> MetaOapg.properties.contributions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductions"]) -> MetaOapg.properties.deductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reimbursements"]) -> MetaOapg.properties.reimbursements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outsideGrossPayables"]) -> MetaOapg.properties.outsideGrossPayables: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossAmount"]) -> MetaOapg.properties.grossAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalOutsideGrossAmount"]) -> MetaOapg.properties.totalOutsideGrossAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalContributions"]) -> MetaOapg.properties.totalContributions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalDeductions"]) -> MetaOapg.properties.totalDeductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalReimbursements"]) -> MetaOapg.properties.totalReimbursements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cashAdvanceAmount"]) -> MetaOapg.properties.cashAdvanceAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cashAdvanceSettlementAmount"]) -> MetaOapg.properties.cashAdvanceSettlementAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netAmount"]) -> MetaOapg.properties.netAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["identifier", "employeeNumber", "employeeName", "panNumber", "dateJoined", "jobTitle", "department", "location", "payGroup", "employmentStatus", "workerType", "costCenter", "businessUnit", "remunerationType", "gender", "dateOfBirth", "exitDate", "cycleIdentifier", "cycleFrom", "cycleTo", "cycleMonthName", "cycleMonth", "cycleYear", "cyclePayDays", "workingDays", "lossOfPayDays", "noOfPayDays", "renumerationAmount", "status", "statusDescription", "earnings", "contributions", "deductions", "reimbursements", "outsideGrossPayables", "grossAmount", "totalOutsideGrossAmount", "total", "totalContributions", "totalDeductions", "totalReimbursements", "cashAdvanceAmount", "cashAdvanceSettlementAmount", "netAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> typing.Union[MetaOapg.properties.identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeNumber"]) -> typing.Union[MetaOapg.properties.employeeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeName"]) -> typing.Union[MetaOapg.properties.employeeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["panNumber"]) -> typing.Union[MetaOapg.properties.panNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateJoined"]) -> typing.Union[MetaOapg.properties.dateJoined, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTitle"]) -> typing.Union[MetaOapg.properties.jobTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union[MetaOapg.properties.department, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroup"]) -> typing.Union[MetaOapg.properties.payGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentStatus"]) -> typing.Union['EmploymentStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workerType"]) -> typing.Union['WorkerType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter"]) -> typing.Union[MetaOapg.properties.costCenter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessUnit"]) -> typing.Union[MetaOapg.properties.businessUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remunerationType"]) -> typing.Union['RemunerationType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union['Gender', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfBirth"]) -> typing.Union[MetaOapg.properties.dateOfBirth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exitDate"]) -> typing.Union[MetaOapg.properties.exitDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycleIdentifier"]) -> typing.Union[MetaOapg.properties.cycleIdentifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycleFrom"]) -> typing.Union[MetaOapg.properties.cycleFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycleTo"]) -> typing.Union[MetaOapg.properties.cycleTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycleMonthName"]) -> typing.Union[MetaOapg.properties.cycleMonthName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycleMonth"]) -> typing.Union[MetaOapg.properties.cycleMonth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycleYear"]) -> typing.Union[MetaOapg.properties.cycleYear, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cyclePayDays"]) -> typing.Union[MetaOapg.properties.cyclePayDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workingDays"]) -> typing.Union[MetaOapg.properties.workingDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lossOfPayDays"]) -> typing.Union[MetaOapg.properties.lossOfPayDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noOfPayDays"]) -> typing.Union[MetaOapg.properties.noOfPayDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renumerationAmount"]) -> typing.Union[MetaOapg.properties.renumerationAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['EmployeePayrollCycleRunStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusDescription"]) -> typing.Union[MetaOapg.properties.statusDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earnings"]) -> typing.Union[MetaOapg.properties.earnings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributions"]) -> typing.Union[MetaOapg.properties.contributions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductions"]) -> typing.Union[MetaOapg.properties.deductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reimbursements"]) -> typing.Union[MetaOapg.properties.reimbursements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outsideGrossPayables"]) -> typing.Union[MetaOapg.properties.outsideGrossPayables, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossAmount"]) -> typing.Union[MetaOapg.properties.grossAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalOutsideGrossAmount"]) -> typing.Union[MetaOapg.properties.totalOutsideGrossAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalContributions"]) -> typing.Union[MetaOapg.properties.totalContributions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalDeductions"]) -> typing.Union[MetaOapg.properties.totalDeductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalReimbursements"]) -> typing.Union[MetaOapg.properties.totalReimbursements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cashAdvanceAmount"]) -> typing.Union[MetaOapg.properties.cashAdvanceAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cashAdvanceSettlementAmount"]) -> typing.Union[MetaOapg.properties.cashAdvanceSettlementAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netAmount"]) -> typing.Union[MetaOapg.properties.netAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["identifier", "employeeNumber", "employeeName", "panNumber", "dateJoined", "jobTitle", "department", "location", "payGroup", "employmentStatus", "workerType", "costCenter", "businessUnit", "remunerationType", "gender", "dateOfBirth", "exitDate", "cycleIdentifier", "cycleFrom", "cycleTo", "cycleMonthName", "cycleMonth", "cycleYear", "cyclePayDays", "workingDays", "lossOfPayDays", "noOfPayDays", "renumerationAmount", "status", "statusDescription", "earnings", "contributions", "deductions", "reimbursements", "outsideGrossPayables", "grossAmount", "totalOutsideGrossAmount", "total", "totalContributions", "totalDeductions", "totalReimbursements", "cashAdvanceAmount", "cashAdvanceSettlementAmount", "netAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        identifier: typing.Union[MetaOapg.properties.identifier, None, str, schemas.Unset] = schemas.unset,
        employeeNumber: typing.Union[MetaOapg.properties.employeeNumber, None, str, schemas.Unset] = schemas.unset,
        employeeName: typing.Union[MetaOapg.properties.employeeName, None, str, schemas.Unset] = schemas.unset,
        panNumber: typing.Union[MetaOapg.properties.panNumber, None, str, schemas.Unset] = schemas.unset,
        dateJoined: typing.Union[MetaOapg.properties.dateJoined, None, str, datetime, schemas.Unset] = schemas.unset,
        jobTitle: typing.Union[MetaOapg.properties.jobTitle, None, str, schemas.Unset] = schemas.unset,
        department: typing.Union[MetaOapg.properties.department, None, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, None, str, schemas.Unset] = schemas.unset,
        payGroup: typing.Union[MetaOapg.properties.payGroup, None, str, schemas.Unset] = schemas.unset,
        employmentStatus: typing.Union['EmploymentStatus', schemas.Unset] = schemas.unset,
        workerType: typing.Union['WorkerType', schemas.Unset] = schemas.unset,
        costCenter: typing.Union[MetaOapg.properties.costCenter, None, str, schemas.Unset] = schemas.unset,
        businessUnit: typing.Union[MetaOapg.properties.businessUnit, None, str, schemas.Unset] = schemas.unset,
        remunerationType: typing.Union['RemunerationType', schemas.Unset] = schemas.unset,
        gender: typing.Union['Gender', schemas.Unset] = schemas.unset,
        dateOfBirth: typing.Union[MetaOapg.properties.dateOfBirth, None, str, datetime, schemas.Unset] = schemas.unset,
        exitDate: typing.Union[MetaOapg.properties.exitDate, None, str, datetime, schemas.Unset] = schemas.unset,
        cycleIdentifier: typing.Union[MetaOapg.properties.cycleIdentifier, None, str, schemas.Unset] = schemas.unset,
        cycleFrom: typing.Union[MetaOapg.properties.cycleFrom, str, datetime, schemas.Unset] = schemas.unset,
        cycleTo: typing.Union[MetaOapg.properties.cycleTo, str, datetime, schemas.Unset] = schemas.unset,
        cycleMonthName: typing.Union[MetaOapg.properties.cycleMonthName, None, str, schemas.Unset] = schemas.unset,
        cycleMonth: typing.Union[MetaOapg.properties.cycleMonth, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cycleYear: typing.Union[MetaOapg.properties.cycleYear, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cyclePayDays: typing.Union[MetaOapg.properties.cyclePayDays, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        workingDays: typing.Union[MetaOapg.properties.workingDays, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lossOfPayDays: typing.Union[MetaOapg.properties.lossOfPayDays, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        noOfPayDays: typing.Union[MetaOapg.properties.noOfPayDays, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        renumerationAmount: typing.Union[MetaOapg.properties.renumerationAmount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        status: typing.Union['EmployeePayrollCycleRunStatus', schemas.Unset] = schemas.unset,
        statusDescription: typing.Union[MetaOapg.properties.statusDescription, None, str, schemas.Unset] = schemas.unset,
        earnings: typing.Union[MetaOapg.properties.earnings, list, tuple, None, schemas.Unset] = schemas.unset,
        contributions: typing.Union[MetaOapg.properties.contributions, list, tuple, None, schemas.Unset] = schemas.unset,
        deductions: typing.Union[MetaOapg.properties.deductions, list, tuple, None, schemas.Unset] = schemas.unset,
        reimbursements: typing.Union[MetaOapg.properties.reimbursements, list, tuple, None, schemas.Unset] = schemas.unset,
        outsideGrossPayables: typing.Union[MetaOapg.properties.outsideGrossPayables, list, tuple, None, schemas.Unset] = schemas.unset,
        grossAmount: typing.Union[MetaOapg.properties.grossAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalOutsideGrossAmount: typing.Union[MetaOapg.properties.totalOutsideGrossAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalContributions: typing.Union[MetaOapg.properties.totalContributions, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalDeductions: typing.Union[MetaOapg.properties.totalDeductions, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalReimbursements: typing.Union[MetaOapg.properties.totalReimbursements, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cashAdvanceAmount: typing.Union[MetaOapg.properties.cashAdvanceAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cashAdvanceSettlementAmount: typing.Union[MetaOapg.properties.cashAdvanceSettlementAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        netAmount: typing.Union[MetaOapg.properties.netAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APIPayRegisterView':
        return super().__new__(
            cls,
            *args,
            identifier=identifier,
            employeeNumber=employeeNumber,
            employeeName=employeeName,
            panNumber=panNumber,
            dateJoined=dateJoined,
            jobTitle=jobTitle,
            department=department,
            location=location,
            payGroup=payGroup,
            employmentStatus=employmentStatus,
            workerType=workerType,
            costCenter=costCenter,
            businessUnit=businessUnit,
            remunerationType=remunerationType,
            gender=gender,
            dateOfBirth=dateOfBirth,
            exitDate=exitDate,
            cycleIdentifier=cycleIdentifier,
            cycleFrom=cycleFrom,
            cycleTo=cycleTo,
            cycleMonthName=cycleMonthName,
            cycleMonth=cycleMonth,
            cycleYear=cycleYear,
            cyclePayDays=cyclePayDays,
            workingDays=workingDays,
            lossOfPayDays=lossOfPayDays,
            noOfPayDays=noOfPayDays,
            renumerationAmount=renumerationAmount,
            status=status,
            statusDescription=statusDescription,
            earnings=earnings,
            contributions=contributions,
            deductions=deductions,
            reimbursements=reimbursements,
            outsideGrossPayables=outsideGrossPayables,
            grossAmount=grossAmount,
            totalOutsideGrossAmount=totalOutsideGrossAmount,
            total=total,
            totalContributions=totalContributions,
            totalDeductions=totalDeductions,
            totalReimbursements=totalReimbursements,
            cashAdvanceAmount=cashAdvanceAmount,
            cashAdvanceSettlementAmount=cashAdvanceSettlementAmount,
            netAmount=netAmount,
            _configuration=_configuration,
            **kwargs,
        )

from keka_hr_python_sdk.model.employee_payroll_cycle_run_status import EmployeePayrollCycleRunStatus
from keka_hr_python_sdk.model.employment_status import EmploymentStatus
from keka_hr_python_sdk.model.gender import Gender
from keka_hr_python_sdk.model.pay_item_view import PayItemView
from keka_hr_python_sdk.model.remuneration_type import RemunerationType
from keka_hr_python_sdk.model.worker_type import WorkerType
