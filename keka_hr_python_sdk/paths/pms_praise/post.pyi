# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from keka_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from keka_hr_python_sdk.api_response import AsyncGeneratorResponse
from keka_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from keka_hr_python_sdk import schemas  # noqa: F401

from keka_hr_python_sdk.model.add_praise import AddPraise as AddPraiseSchema
from keka_hr_python_sdk.model.add_praise_employee_ids import AddPraiseEmployeeIds as AddPraiseEmployeeIdsSchema
from keka_hr_python_sdk.model.string_response import StringResponse as StringResponseSchema

from keka_hr_python_sdk.type.add_praise_employee_ids import AddPraiseEmployeeIds
from keka_hr_python_sdk.type.add_praise import AddPraise
from keka_hr_python_sdk.type.string_response import StringResponse

from ...api_client import Dictionary
from keka_hr_python_sdk.pydantic.add_praise import AddPraise as AddPraisePydantic
from keka_hr_python_sdk.pydantic.add_praise_employee_ids import AddPraiseEmployeeIds as AddPraiseEmployeeIdsPydantic
from keka_hr_python_sdk.pydantic.string_response import StringResponse as StringResponsePydantic

# body param
SchemaForRequestBodyApplicationJson = AddPraiseSchema
SchemaForRequestBodyTextJson = AddPraiseSchema
SchemaForRequestBodyApplicationJsonPatchjson = AddPraiseSchema
SchemaForRequestBodyApplicationJson = AddPraiseSchema


request_body_add_praise = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaForRequestBodyTextJson),
        'application/json-patch+json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJsonPatchjson),
        'application/*+json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = StringResponseSchema
SchemaFor200ResponseBodyTextJson = StringResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: StringResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: StringResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJson),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)
_all_accept_content_types = (
    'application/json',
    'text/json',
)


class BaseApi(api_client.Api):

    def _create_praise_identifier_mapped_args(
        self,
        employee_ids: AddPraiseEmployeeIds,
        feedback: str,
        badge_id: str,
        given_by: str,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if employee_ids is not None:
            _body["employeeIds"] = employee_ids
        if feedback is not None:
            _body["feedback"] = feedback
        if badge_id is not None:
            _body["badgeId"] = badge_id
        if given_by is not None:
            _body["givenBy"] = given_by
        args.body = _body
        return args

    async def _acreate_praise_identifier_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Add Praise
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/pms/praise',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_add_praise.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_praise_identifier_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Add Praise
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/pms/praise',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_add_praise.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreatePraiseIdentifierRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_praise_identifier(
        self,
        employee_ids: AddPraiseEmployeeIds,
        feedback: str,
        badge_id: str,
        given_by: str,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_praise_identifier_mapped_args(
            employee_ids=employee_ids,
            feedback=feedback,
            badge_id=badge_id,
            given_by=given_by,
        )
        return await self._acreate_praise_identifier_oapg(
            body=args.body,
            **kwargs,
        )
    
    def create_praise_identifier(
        self,
        employee_ids: AddPraiseEmployeeIds,
        feedback: str,
        badge_id: str,
        given_by: str,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_praise_identifier_mapped_args(
            employee_ids=employee_ids,
            feedback=feedback,
            badge_id=badge_id,
            given_by=given_by,
        )
        return self._create_praise_identifier_oapg(
            body=args.body,
        )

class CreatePraiseIdentifier(BaseApi):

    async def acreate_praise_identifier(
        self,
        employee_ids: AddPraiseEmployeeIds,
        feedback: str,
        badge_id: str,
        given_by: str,
        validate: bool = False,
        **kwargs,
    ) -> StringResponsePydantic:
        raw_response = await self.raw.acreate_praise_identifier(
            employee_ids=employee_ids,
            feedback=feedback,
            badge_id=badge_id,
            given_by=given_by,
            **kwargs,
        )
        if validate:
            return StringResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(StringResponsePydantic, raw_response.body)
    
    
    def create_praise_identifier(
        self,
        employee_ids: AddPraiseEmployeeIds,
        feedback: str,
        badge_id: str,
        given_by: str,
        validate: bool = False,
    ) -> StringResponsePydantic:
        raw_response = self.raw.create_praise_identifier(
            employee_ids=employee_ids,
            feedback=feedback,
            badge_id=badge_id,
            given_by=given_by,
        )
        if validate:
            return StringResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(StringResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        employee_ids: AddPraiseEmployeeIds,
        feedback: str,
        badge_id: str,
        given_by: str,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_praise_identifier_mapped_args(
            employee_ids=employee_ids,
            feedback=feedback,
            badge_id=badge_id,
            given_by=given_by,
        )
        return await self._acreate_praise_identifier_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        employee_ids: AddPraiseEmployeeIds,
        feedback: str,
        badge_id: str,
        given_by: str,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_praise_identifier_mapped_args(
            employee_ids=employee_ids,
            feedback=feedback,
            badge_id=badge_id,
            given_by=given_by,
        )
        return self._create_praise_identifier_oapg(
            body=args.body,
        )

