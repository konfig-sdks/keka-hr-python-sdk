# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from keka_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from keka_hr_python_sdk.api_response import AsyncGeneratorResponse
from keka_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from keka_hr_python_sdk import schemas  # noqa: F401

from keka_hr_python_sdk.model.project_task_assigned_to import ProjectTaskAssignedTo as ProjectTaskAssignedToSchema
from keka_hr_python_sdk.model.project_task import ProjectTask as ProjectTaskSchema
from keka_hr_python_sdk.model.task_billing_type import TaskBillingType as TaskBillingTypeSchema
from keka_hr_python_sdk.model.string_response import StringResponse as StringResponseSchema

from keka_hr_python_sdk.type.project_task import ProjectTask
from keka_hr_python_sdk.type.string_response import StringResponse
from keka_hr_python_sdk.type.task_billing_type import TaskBillingType
from keka_hr_python_sdk.type.project_task_assigned_to import ProjectTaskAssignedTo

from ...api_client import Dictionary
from keka_hr_python_sdk.pydantic.task_billing_type import TaskBillingType as TaskBillingTypePydantic
from keka_hr_python_sdk.pydantic.project_task_assigned_to import ProjectTaskAssignedTo as ProjectTaskAssignedToPydantic
from keka_hr_python_sdk.pydantic.project_task import ProjectTask as ProjectTaskPydantic
from keka_hr_python_sdk.pydantic.string_response import StringResponse as StringResponsePydantic

# Path params
ProjectIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'projectId': typing.Union[ProjectIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_project_id = api_client.PathParameter(
    name="projectId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ProjectIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = ProjectTaskSchema
SchemaForRequestBodyTextJson = ProjectTaskSchema
SchemaForRequestBodyApplicationJsonPatchjson = ProjectTaskSchema
SchemaForRequestBodyApplicationJson = ProjectTaskSchema


request_body_project_task = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaForRequestBodyTextJson),
        'application/json-patch+json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJsonPatchjson),
        'application/*+json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = StringResponseSchema
SchemaFor200ResponseBodyTextJson = StringResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: StringResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: StringResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJson),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)
_all_accept_content_types = (
    'application/json',
    'text/json',
)


class BaseApi(api_client.Api):

    def _create_task_identifier_mapped_args(
        self,
        project_id: str,
        name: str,
        start_date: datetime,
        end_date: datetime,
        project_id: str,
        description: typing.Optional[typing.Optional[str]] = None,
        task_billing_type: typing.Optional[TaskBillingType] = None,
        assigned_to: typing.Optional[ProjectTaskAssignedTo] = None,
        estimated_hours: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        phase_id: typing.Optional[typing.Optional[str]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if description is not None:
            _body["description"] = description
        if project_id is not None:
            _body["projectId"] = project_id
        if name is not None:
            _body["name"] = name
        if task_billing_type is not None:
            _body["taskBillingType"] = task_billing_type
        if assigned_to is not None:
            _body["assignedTo"] = assigned_to
        if start_date is not None:
            _body["startDate"] = start_date
        if end_date is not None:
            _body["endDate"] = end_date
        if estimated_hours is not None:
            _body["estimatedHours"] = estimated_hours
        if phase_id is not None:
            _body["phaseId"] = phase_id
        args.body = _body
        if project_id is not None:
            _path_params["projectId"] = project_id
        args.path = _path_params
        return args

    async def _acreate_task_identifier_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create a task
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_project_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/psa/projects/{projectId}/tasks',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_project_task.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_task_identifier_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create a task
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_project_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/psa/projects/{projectId}/tasks',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_project_task.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateTaskIdentifierRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_task_identifier(
        self,
        project_id: str,
        name: str,
        start_date: datetime,
        end_date: datetime,
        project_id: str,
        description: typing.Optional[typing.Optional[str]] = None,
        task_billing_type: typing.Optional[TaskBillingType] = None,
        assigned_to: typing.Optional[ProjectTaskAssignedTo] = None,
        estimated_hours: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        phase_id: typing.Optional[typing.Optional[str]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_task_identifier_mapped_args(
            project_id=project_id,
            name=name,
            start_date=start_date,
            end_date=end_date,
            project_id=project_id,
            description=description,
            task_billing_type=task_billing_type,
            assigned_to=assigned_to,
            estimated_hours=estimated_hours,
            phase_id=phase_id,
        )
        return await self._acreate_task_identifier_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def create_task_identifier(
        self,
        project_id: str,
        name: str,
        start_date: datetime,
        end_date: datetime,
        project_id: str,
        description: typing.Optional[typing.Optional[str]] = None,
        task_billing_type: typing.Optional[TaskBillingType] = None,
        assigned_to: typing.Optional[ProjectTaskAssignedTo] = None,
        estimated_hours: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        phase_id: typing.Optional[typing.Optional[str]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_task_identifier_mapped_args(
            project_id=project_id,
            name=name,
            start_date=start_date,
            end_date=end_date,
            project_id=project_id,
            description=description,
            task_billing_type=task_billing_type,
            assigned_to=assigned_to,
            estimated_hours=estimated_hours,
            phase_id=phase_id,
        )
        return self._create_task_identifier_oapg(
            body=args.body,
            path_params=args.path,
        )

class CreateTaskIdentifier(BaseApi):

    async def acreate_task_identifier(
        self,
        project_id: str,
        name: str,
        start_date: datetime,
        end_date: datetime,
        project_id: str,
        description: typing.Optional[typing.Optional[str]] = None,
        task_billing_type: typing.Optional[TaskBillingType] = None,
        assigned_to: typing.Optional[ProjectTaskAssignedTo] = None,
        estimated_hours: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        phase_id: typing.Optional[typing.Optional[str]] = None,
        validate: bool = False,
        **kwargs,
    ) -> StringResponsePydantic:
        raw_response = await self.raw.acreate_task_identifier(
            project_id=project_id,
            name=name,
            start_date=start_date,
            end_date=end_date,
            project_id=project_id,
            description=description,
            task_billing_type=task_billing_type,
            assigned_to=assigned_to,
            estimated_hours=estimated_hours,
            phase_id=phase_id,
            **kwargs,
        )
        if validate:
            return StringResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(StringResponsePydantic, raw_response.body)
    
    
    def create_task_identifier(
        self,
        project_id: str,
        name: str,
        start_date: datetime,
        end_date: datetime,
        project_id: str,
        description: typing.Optional[typing.Optional[str]] = None,
        task_billing_type: typing.Optional[TaskBillingType] = None,
        assigned_to: typing.Optional[ProjectTaskAssignedTo] = None,
        estimated_hours: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        phase_id: typing.Optional[typing.Optional[str]] = None,
        validate: bool = False,
    ) -> StringResponsePydantic:
        raw_response = self.raw.create_task_identifier(
            project_id=project_id,
            name=name,
            start_date=start_date,
            end_date=end_date,
            project_id=project_id,
            description=description,
            task_billing_type=task_billing_type,
            assigned_to=assigned_to,
            estimated_hours=estimated_hours,
            phase_id=phase_id,
        )
        if validate:
            return StringResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(StringResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        project_id: str,
        name: str,
        start_date: datetime,
        end_date: datetime,
        project_id: str,
        description: typing.Optional[typing.Optional[str]] = None,
        task_billing_type: typing.Optional[TaskBillingType] = None,
        assigned_to: typing.Optional[ProjectTaskAssignedTo] = None,
        estimated_hours: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        phase_id: typing.Optional[typing.Optional[str]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_task_identifier_mapped_args(
            project_id=project_id,
            name=name,
            start_date=start_date,
            end_date=end_date,
            project_id=project_id,
            description=description,
            task_billing_type=task_billing_type,
            assigned_to=assigned_to,
            estimated_hours=estimated_hours,
            phase_id=phase_id,
        )
        return await self._acreate_task_identifier_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        project_id: str,
        name: str,
        start_date: datetime,
        end_date: datetime,
        project_id: str,
        description: typing.Optional[typing.Optional[str]] = None,
        task_billing_type: typing.Optional[TaskBillingType] = None,
        assigned_to: typing.Optional[ProjectTaskAssignedTo] = None,
        estimated_hours: typing.Optional[typing.Optional[typing.Union[int, float]]] = None,
        phase_id: typing.Optional[typing.Optional[str]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_task_identifier_mapped_args(
            project_id=project_id,
            name=name,
            start_date=start_date,
            end_date=end_date,
            project_id=project_id,
            description=description,
            task_billing_type=task_billing_type,
            assigned_to=assigned_to,
            estimated_hours=estimated_hours,
            phase_id=phase_id,
        )
        return self._create_task_identifier_oapg(
            body=args.body,
            path_params=args.path,
        )

