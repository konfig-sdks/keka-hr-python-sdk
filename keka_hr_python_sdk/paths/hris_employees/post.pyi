# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from keka_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from keka_hr_python_sdk.api_response import AsyncGeneratorResponse
from keka_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from keka_hr_python_sdk import schemas  # noqa: F401

from keka_hr_python_sdk.model.employee import Employee as EmployeeSchema
from keka_hr_python_sdk.model.string_response import StringResponse as StringResponseSchema
from keka_hr_python_sdk.model.gender import Gender as GenderSchema

from keka_hr_python_sdk.type.gender import Gender
from keka_hr_python_sdk.type.string_response import StringResponse
from keka_hr_python_sdk.type.employee import Employee

from ...api_client import Dictionary
from keka_hr_python_sdk.pydantic.employee import Employee as EmployeePydantic
from keka_hr_python_sdk.pydantic.gender import Gender as GenderPydantic
from keka_hr_python_sdk.pydantic.string_response import StringResponse as StringResponsePydantic

# body param
SchemaForRequestBodyApplicationJson = EmployeeSchema
SchemaForRequestBodyTextJson = EmployeeSchema
SchemaForRequestBodyApplicationJsonPatchjson = EmployeeSchema
SchemaForRequestBodyApplicationJson = EmployeeSchema


request_body_employee = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaForRequestBodyTextJson),
        'application/json-patch+json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJsonPatchjson),
        'application/*+json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = StringResponseSchema
SchemaFor200ResponseBodyTextJson = StringResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: StringResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: StringResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJson),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)
_all_accept_content_types = (
    'application/json',
    'text/json',
)


class BaseApi(api_client.Api):

    def _create_employee_mapped_args(
        self,
        display_name: str,
        first_name: str,
        last_name: str,
        email: str,
        gender: Gender,
        date_of_birth: datetime,
        date_joined: datetime,
        department: str,
        business_unit: str,
        job_title: str,
        location: str,
        employee_number: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        secondary_job_title: typing.Optional[typing.Optional[str]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if employee_number is not None:
            _body["employeeNumber"] = employee_number
        if display_name is not None:
            _body["displayName"] = display_name
        if first_name is not None:
            _body["firstName"] = first_name
        if middle_name is not None:
            _body["middleName"] = middle_name
        if last_name is not None:
            _body["lastName"] = last_name
        if email is not None:
            _body["email"] = email
        if mobile_number is not None:
            _body["mobileNumber"] = mobile_number
        if gender is not None:
            _body["gender"] = gender
        if date_of_birth is not None:
            _body["dateOfBirth"] = date_of_birth
        if date_joined is not None:
            _body["dateJoined"] = date_joined
        if department is not None:
            _body["department"] = department
        if business_unit is not None:
            _body["businessUnit"] = business_unit
        if job_title is not None:
            _body["jobTitle"] = job_title
        if secondary_job_title is not None:
            _body["secondaryJobTitle"] = secondary_job_title
        if location is not None:
            _body["location"] = location
        args.body = _body
        return args

    async def _acreate_employee_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create an Employee
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/hris/employees',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_employee.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_employee_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create an Employee
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/hris/employees',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_employee.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateEmployeeRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_employee(
        self,
        display_name: str,
        first_name: str,
        last_name: str,
        email: str,
        gender: Gender,
        date_of_birth: datetime,
        date_joined: datetime,
        department: str,
        business_unit: str,
        job_title: str,
        location: str,
        employee_number: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        secondary_job_title: typing.Optional[typing.Optional[str]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_employee_mapped_args(
            display_name=display_name,
            first_name=first_name,
            last_name=last_name,
            email=email,
            gender=gender,
            date_of_birth=date_of_birth,
            date_joined=date_joined,
            department=department,
            business_unit=business_unit,
            job_title=job_title,
            location=location,
            employee_number=employee_number,
            middle_name=middle_name,
            mobile_number=mobile_number,
            secondary_job_title=secondary_job_title,
        )
        return await self._acreate_employee_oapg(
            body=args.body,
            **kwargs,
        )
    
    def create_employee(
        self,
        display_name: str,
        first_name: str,
        last_name: str,
        email: str,
        gender: Gender,
        date_of_birth: datetime,
        date_joined: datetime,
        department: str,
        business_unit: str,
        job_title: str,
        location: str,
        employee_number: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        secondary_job_title: typing.Optional[typing.Optional[str]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_employee_mapped_args(
            display_name=display_name,
            first_name=first_name,
            last_name=last_name,
            email=email,
            gender=gender,
            date_of_birth=date_of_birth,
            date_joined=date_joined,
            department=department,
            business_unit=business_unit,
            job_title=job_title,
            location=location,
            employee_number=employee_number,
            middle_name=middle_name,
            mobile_number=mobile_number,
            secondary_job_title=secondary_job_title,
        )
        return self._create_employee_oapg(
            body=args.body,
        )

class CreateEmployee(BaseApi):

    async def acreate_employee(
        self,
        display_name: str,
        first_name: str,
        last_name: str,
        email: str,
        gender: Gender,
        date_of_birth: datetime,
        date_joined: datetime,
        department: str,
        business_unit: str,
        job_title: str,
        location: str,
        employee_number: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        secondary_job_title: typing.Optional[typing.Optional[str]] = None,
        validate: bool = False,
        **kwargs,
    ) -> StringResponsePydantic:
        raw_response = await self.raw.acreate_employee(
            display_name=display_name,
            first_name=first_name,
            last_name=last_name,
            email=email,
            gender=gender,
            date_of_birth=date_of_birth,
            date_joined=date_joined,
            department=department,
            business_unit=business_unit,
            job_title=job_title,
            location=location,
            employee_number=employee_number,
            middle_name=middle_name,
            mobile_number=mobile_number,
            secondary_job_title=secondary_job_title,
            **kwargs,
        )
        if validate:
            return StringResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(StringResponsePydantic, raw_response.body)
    
    
    def create_employee(
        self,
        display_name: str,
        first_name: str,
        last_name: str,
        email: str,
        gender: Gender,
        date_of_birth: datetime,
        date_joined: datetime,
        department: str,
        business_unit: str,
        job_title: str,
        location: str,
        employee_number: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        secondary_job_title: typing.Optional[typing.Optional[str]] = None,
        validate: bool = False,
    ) -> StringResponsePydantic:
        raw_response = self.raw.create_employee(
            display_name=display_name,
            first_name=first_name,
            last_name=last_name,
            email=email,
            gender=gender,
            date_of_birth=date_of_birth,
            date_joined=date_joined,
            department=department,
            business_unit=business_unit,
            job_title=job_title,
            location=location,
            employee_number=employee_number,
            middle_name=middle_name,
            mobile_number=mobile_number,
            secondary_job_title=secondary_job_title,
        )
        if validate:
            return StringResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(StringResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        display_name: str,
        first_name: str,
        last_name: str,
        email: str,
        gender: Gender,
        date_of_birth: datetime,
        date_joined: datetime,
        department: str,
        business_unit: str,
        job_title: str,
        location: str,
        employee_number: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        secondary_job_title: typing.Optional[typing.Optional[str]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_employee_mapped_args(
            display_name=display_name,
            first_name=first_name,
            last_name=last_name,
            email=email,
            gender=gender,
            date_of_birth=date_of_birth,
            date_joined=date_joined,
            department=department,
            business_unit=business_unit,
            job_title=job_title,
            location=location,
            employee_number=employee_number,
            middle_name=middle_name,
            mobile_number=mobile_number,
            secondary_job_title=secondary_job_title,
        )
        return await self._acreate_employee_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        display_name: str,
        first_name: str,
        last_name: str,
        email: str,
        gender: Gender,
        date_of_birth: datetime,
        date_joined: datetime,
        department: str,
        business_unit: str,
        job_title: str,
        location: str,
        employee_number: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        mobile_number: typing.Optional[typing.Optional[str]] = None,
        secondary_job_title: typing.Optional[typing.Optional[str]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_employee_mapped_args(
            display_name=display_name,
            first_name=first_name,
            last_name=last_name,
            email=email,
            gender=gender,
            date_of_birth=date_of_birth,
            date_joined=date_joined,
            department=department,
            business_unit=business_unit,
            job_title=job_title,
            location=location,
            employee_number=employee_number,
            middle_name=middle_name,
            mobile_number=mobile_number,
            secondary_job_title=secondary_job_title,
        )
        return self._create_employee_oapg(
            body=args.body,
        )

