# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from keka_hr_python_sdk.pydantic.education_dto import EducationDTO
from keka_hr_python_sdk.pydantic.experience_dto import ExperienceDTO
from keka_hr_python_sdk.pydantic.gender import Gender
from keka_hr_python_sdk.pydantic.talent_pool_candidate_dto_additional_candidate_details import TalentPoolCandidateDTOAdditionalCandidateDetails
from keka_hr_python_sdk.pydantic.talent_pool_candidate_dto_skills import TalentPoolCandidateDTOSkills
from keka_hr_python_sdk.pydantic.talent_pool_candidate_dto_talent_pool_details import TalentPoolCandidateDTOTalentPoolDetails

class TalentPoolCandidateDTO(BaseModel):
    id: typing.Optional[typing.Optional[str]] = Field(None, alias='id')

    # Gets or sets the first name.
    first_name: typing.Optional[typing.Optional[str]] = Field(None, alias='firstName')

    # Gets or sets the last name.
    last_name: typing.Optional[typing.Optional[str]] = Field(None, alias='lastName')

    # Gets or sets the middle name.
    middle_name: typing.Optional[typing.Optional[str]] = Field(None, alias='middleName')

    gender: typing.Optional[Gender] = Field(None, alias='gender')

    # Gets or sets the email.
    email: typing.Optional[typing.Optional[str]] = Field(None, alias='email')

    # Gets or sets the phone
    phone: typing.Optional[typing.Optional[str]] = Field(None, alias='phone')

    # Gets or sets the education details.
    education_details: typing.Optional[typing.Optional[typing.List[EducationDTO]]] = Field(None, alias='educationDetails')

    # Gets or sets the experience details.
    experience_details: typing.Optional[typing.Optional[typing.List[ExperienceDTO]]] = Field(None, alias='experienceDetails')

    skills: typing.Optional[TalentPoolCandidateDTOSkills] = Field(None, alias='skills')

    additional_candidate_details: typing.Optional[TalentPoolCandidateDTOAdditionalCandidateDetails] = Field(None, alias='additionalCandidateDetails')

    talent_pool_details: typing.Optional[TalentPoolCandidateDTOTalentPoolDetails] = Field(None, alias='talentPoolDetails')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
