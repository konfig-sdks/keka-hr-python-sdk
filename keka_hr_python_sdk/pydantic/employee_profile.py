# coding: utf-8

"""
    Requisition

    Here's our story,  It all began with the frustration of using software that sucks. Prior to starting Keka, our core team was a 100 person business that needed an easy to use software for managing employees. We looked everywhere and all we found were software that was lousy and hard to use. We felt SME businesses in India deserved something better. Something awesome actually!  Thus emerged Keka!

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from keka_hr_python_sdk.pydantic.account_status import AccountStatus
from keka_hr_python_sdk.pydantic.address import Address
from keka_hr_python_sdk.pydantic.blood_group import BloodGroup
from keka_hr_python_sdk.pydantic.contingent_type import ContingentType
from keka_hr_python_sdk.pydantic.custom_field import CustomField
from keka_hr_python_sdk.pydantic.education import Education
from keka_hr_python_sdk.pydantic.employee_lookup import EmployeeLookup
from keka_hr_python_sdk.pydantic.employment_status import EmploymentStatus
from keka_hr_python_sdk.pydantic.exit_status import ExitStatus
from keka_hr_python_sdk.pydantic.exit_type import ExitType
from keka_hr_python_sdk.pydantic.experience import Experience
from keka_hr_python_sdk.pydantic.gender import Gender
from keka_hr_python_sdk.pydantic.group_lookup import GroupLookup
from keka_hr_python_sdk.pydantic.image import Image
from keka_hr_python_sdk.pydantic.invitation_status import InvitationStatus
from keka_hr_python_sdk.pydantic.lookup_info import LookupInfo
from keka_hr_python_sdk.pydantic.marital_status import MaritalStatus
from keka_hr_python_sdk.pydantic.relation import Relation
from keka_hr_python_sdk.pydantic.time_type import TimeType
from keka_hr_python_sdk.pydantic.worker_type import WorkerType

class EmployeeProfile(BaseModel):
    id: typing.Optional[typing.Optional[str]] = Field(None, alias='id')

    employee_number: typing.Optional[typing.Optional[str]] = Field(None, alias='employeeNumber')

    first_name: typing.Optional[typing.Optional[str]] = Field(None, alias='firstName')

    middle_name: typing.Optional[typing.Optional[str]] = Field(None, alias='middleName')

    last_name: typing.Optional[typing.Optional[str]] = Field(None, alias='lastName')

    display_name: typing.Optional[typing.Optional[str]] = Field(None, alias='displayName')

    email: typing.Optional[typing.Optional[str]] = Field(None, alias='email')

    city: typing.Optional[typing.Optional[str]] = Field(None, alias='city')

    country_code: typing.Optional[typing.Optional[str]] = Field(None, alias='countryCode')

    image: typing.Optional[Image] = Field(None, alias='image')

    job_title: typing.Optional[LookupInfo] = Field(None, alias='jobTitle')

    secondary_job_title: typing.Optional[typing.Optional[str]] = Field(None, alias='secondaryJobTitle')

    reports_to: typing.Optional[EmployeeLookup] = Field(None, alias='reportsTo')

    l2_manager: typing.Optional[EmployeeLookup] = Field(None, alias='l2Manager')

    dotted_line_manager: typing.Optional[EmployeeLookup] = Field(None, alias='dottedLineManager')

    contingent_type: typing.Optional[ContingentType] = Field(None, alias='contingentType')

    time_type: typing.Optional[TimeType] = Field(None, alias='timeType')

    worker_type: typing.Optional[WorkerType] = Field(None, alias='workerType')

    is_private: typing.Optional[bool] = Field(None, alias='isPrivate')

    is_profile_complete: typing.Optional[bool] = Field(None, alias='isProfileComplete')

    marital_status: typing.Optional[MaritalStatus] = Field(None, alias='maritalStatus')

    marriage_date: typing.Optional[typing.Optional[datetime]] = Field(None, alias='marriageDate')

    gender: typing.Optional[Gender] = Field(None, alias='gender')

    joining_date: typing.Optional[datetime] = Field(None, alias='joiningDate')

    professional_summary: typing.Optional[typing.Optional[str]] = Field(None, alias='professionalSummary')

    date_of_birth: typing.Optional[typing.Optional[datetime]] = Field(None, alias='dateOfBirth')

    resignation_submitted_date: typing.Optional[typing.Optional[datetime]] = Field(None, alias='resignationSubmittedDate')

    exit_date: typing.Optional[typing.Optional[datetime]] = Field(None, alias='exitDate')

    employment_status: typing.Optional[EmploymentStatus] = Field(None, alias='employmentStatus')

    account_status: typing.Optional[AccountStatus] = Field(None, alias='accountStatus')

    invitation_status: typing.Optional[InvitationStatus] = Field(None, alias='invitationStatus')

    exit_status: typing.Optional[ExitStatus] = Field(None, alias='exitStatus')

    exit_type: typing.Optional[ExitType] = Field(None, alias='exitType')

    exit_reason: typing.Optional[typing.Optional[str]] = Field(None, alias='exitReason')

    personal_email: typing.Optional[typing.Optional[str]] = Field(None, alias='personalEmail')

    work_phone: typing.Optional[typing.Optional[str]] = Field(None, alias='workPhone')

    home_phone: typing.Optional[typing.Optional[str]] = Field(None, alias='homePhone')

    mobile_phone: typing.Optional[typing.Optional[str]] = Field(None, alias='mobilePhone')

    blood_group: typing.Optional[BloodGroup] = Field(None, alias='bloodGroup')

    attendance_number: typing.Optional[typing.Optional[str]] = Field(None, alias='attendanceNumber')

    probation_end_date: typing.Optional[typing.Optional[datetime]] = Field(None, alias='probationEndDate')

    current_address: typing.Optional[Address] = Field(None, alias='currentAddress')

    permanent_address: typing.Optional[Address] = Field(None, alias='permanentAddress')

    relations: typing.Optional[typing.Optional[typing.List[Relation]]] = Field(None, alias='relations')

    education_details: typing.Optional[typing.Optional[typing.List[Education]]] = Field(None, alias='educationDetails')

    experience_details: typing.Optional[typing.Optional[typing.List[Experience]]] = Field(None, alias='experienceDetails')

    custom_fields: typing.Optional[typing.Optional[typing.List[CustomField]]] = Field(None, alias='customFields')

    groups: typing.Optional[typing.Optional[typing.List[GroupLookup]]] = Field(None, alias='groups')

    leave_plan_info: typing.Optional[LookupInfo] = Field(None, alias='leavePlanInfo')

    band_info: typing.Optional[LookupInfo] = Field(None, alias='bandInfo')

    pay_grade_info: typing.Optional[LookupInfo] = Field(None, alias='payGradeInfo')

    shift_policy_info: typing.Optional[LookupInfo] = Field(None, alias='shiftPolicyInfo')

    weekly_off_policy_info: typing.Optional[LookupInfo] = Field(None, alias='weeklyOffPolicyInfo')

    capture_scheme_info: typing.Optional[LookupInfo] = Field(None, alias='captureSchemeInfo')

    tracking_policy_info: typing.Optional[LookupInfo] = Field(None, alias='trackingPolicyInfo')

    expense_policy_info: typing.Optional[LookupInfo] = Field(None, alias='expensePolicyInfo')

    overtime_policy_info: typing.Optional[LookupInfo] = Field(None, alias='overtimePolicyInfo')

    identifier: typing.Optional[typing.Optional[str]] = Field(None, alias='identifier')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
